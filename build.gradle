buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5'
  }
}

import java.text.SimpleDateFormat
def globalVersion = new Version(version)
def rawVersion = version

configurations {
  published
}

allprojects {
  repositories {
    jcenter()
  }
  apply plugin: 'idea'
  apply plugin: 'com.jfrog.bintray'
  configure(subprojects.findAll { new File(it.projectDir, 'src').directory }) {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'idea'
  }
  group = 'net.dehora.dropwizard'
  version = globalVersion
  status = version.status
  ext.publish = true
  bintray {
    user = bintrayUser
    key = bintrayKey
    configurations = ['published', 'archives']
    publish = project.publish
    pkg {
      repo = 'maven'
      name = 'dropwizard-statsd'
      desc = 'a statsd recorder factory for dropwizard'
      websiteUrl = 'https://github.com/dehora/dropwizard-statsd'
      issueTrackerUrl = 'https://github.com/dehora/dropwizard-statsd/issues'
      vcsUrl = 'https://github.com/dehora/dropwizard-statsd.git'
      licenses = ['Apache-2.0']
      labels = ['dropwizard', 'statsd']
      publicDownloadNumbers = true
      //noinspection GroovyAssignabilityCheck
      version {
        name = rawVersion
        vcsTag = rawVersion
      }
    }
  }
}

subprojects {
  apply plugin: 'maven'
  if (project.plugins.hasPlugin('java')) {
    configurations {
      published
    }
    dependencies {
      testCompile 'junit:junit:4.11'
    }
    task sourceJar(type: Jar) {
      from sourceSets.main.allSource
      classifier = 'sources'
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
      classifier = 'javadoc'
      from javadoc.destinationDir
    }
    artifacts {
      published sourceJar
      published javadocJar
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.0'
}

class Version {
  String originalVersion
  String thisVersion
  String status
  Date buildTime

  Version(String versionValue) {
    buildTime = new Date()
    originalVersion = versionValue
    if (originalVersion.endsWith('-SNAPSHOT')) {
      status = 'integration'
      thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
    } else {
      status = 'release'
      thisVersion = versionValue
    }
  }

  String getTimestamp() {
    // Convert local file timestamp to UTC
    def format = new SimpleDateFormat('yyyyMMddHHmmss')
    format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
    return format.format(buildTime)
  }

  String toString() {
    thisVersion
  }
}